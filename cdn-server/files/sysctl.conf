# most of this comes from https://javapipe.com/blog/iptables-ddos-protection/

# The four values in printk denote: console_loglevel,
# default_message_loglevel, minimum_console_loglevel and
# default_console_loglevel respectively.
kernel.printk = 4 4 1 7

# the number of seconds the kernel waits before rebooting on a panic.
kernel.panic = 10

# Controls the System Request debugging functionality of the kernel
kernel.sysrq = 0

# Controls whether core dumps will append the PID to the core filename.
kernel.core_uses_pid = 1

# Allow for more PIDs
kernel.pid_max = 65535

# select type of process address space randomization used in system
kernel.randomize_va_space = 2

# Controls the maximum size of a message, in bytes
kernel.msgmnb = 65535

# Controls the default maxmimum size of a mesage queue
kernel.msgmax = 65535

# Restrict core dumps
fs.suid_dumpable = 0

# Set maximum number of file descriptors in the Linux kernel
fs.file-max = 1000000

# Set maximum number of file descriptors per process
fs.nr_open = 65535

# Hide exposed kernel pointers unless user as CAP_SYSLOG and
# effective user and group ids are equal to the real ids.
kernel.kptr_restrict = 1

# Do less swapping
vm.swappiness = 1
vm.dirty_ratio = 80
vm.dirty_background_ratio = 5

# specifies the minimum virtual address that a process is allowed to mmap
vm.mmap_min_addr = 4096

# 50% overcommitment of available memory
vm.overcommit_ratio = 50
vm.overcommit_memory = 0

# Set maximum amount of memory allocated to shm to 4GB
kernel.shmmax = 4294967296
kernel.shmall = 4194304

# Keep at least 64MB of free RAM space available
vm.min_free_kbytes = 65535

#Prevent SYN attack, enable SYNcookies (when max_syn.backlog reached)
net.ipv4.tcp_syncookies = 1

# Disables packet forwarding
net.ipv4.ip_forward = 0
net.ipv4.conf.default.forwarding = 0
net.ipv6.conf.all.forwarding = 0
net.ipv6.conf.default.forwarding = 0

# Disables IP source routing
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

# Disable ICMP Redirect Acceptance
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0

# Enable IP spoofing protection, turn on source route verification
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

# Disable Log Spoofed Packets, Source Routed Packets,
# Redirect Packets to prevent DDOS
net.ipv4.conf.all.log_martians = 0
net.ipv4.conf.default.log_martians = 0

# Decrease the time default value for connections to keep alive
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_keepalive_probes = 10
net.ipv4.tcp_keepalive_intvl = 60

# Don't relay bootp
net.ipv4.conf.all.bootp_relay = 0

# Don't proxy arp for anyone
net.ipv4.conf.all.proxy_arp = 0

# Turn on the tcp_timestamps, accurate timestamp make TCP congestion
# control algorithms work better
net.ipv4.tcp_timestamps = 1

# Don't ignore directed pings
net.ipv4.icmp_echo_ignore_all = 0

# Enable ignoring broadcasts request
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Enable bad error message Protection
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Enable a fix for RFC1337 - time-wait assassination hazards in TCP
net.ipv4.tcp_rfc1337 = 1

# Do not auto-configure IPv6
net.ipv6.conf.all.autoconf = 0
net.ipv6.conf.all.accept_ra = 0
net.ipv6.conf.default.autoconf = 0
net.ipv6.conf.default.accept_ra = 0


# For tcp-heavy workloads, enable 'fq' queue management scheduler
net.core.default_qdisc = fq

# Enable BBR TCP Congestion Control
net.ipv4.tcp_congestion_control = bbr

# Turn on the tcp_window_scaling
net.ipv4.tcp_window_scaling = 1

# Increase the read-buffer space allocatable for UDP
net.ipv4.udp_rmem_min = 16384

# Default receive buffer size
net.core.rmem_default = 31457280

# Max receive buffer size (64 Mb)
net.core.rmem_max = 67108864

# Default send buffer size
net.core.wmem_default = 31457280

# Max send buffer size (64 Mb)
net.core.wmem_max = 67108864

# Maximum ancillary buffer size allowed per socket_ Ancillary data is a sequence
# of struct cmsghdr structures with appended data.
net.core.optmem_max = 25165824

# The first value tells the kernel the minimum receive/send buffer for each TCP connection,
# The second value specified tells the kernel the default receive/send buffer for each TCP socket
# value used by other protocols_ The third and last value specified in this variable specifies the maximum
# receive/send buffer that can be allocated for a TCP socket.
net.ipv4.tcp_rmem = 4096 873800 33554432
net.ipv4.tcp_wmem = 4096 655360 8388608
net.ipv4.udp_wmem_min = 16384

# These are global variables affecting total pages for TCP sockets (8388608 * 4: 32 GB): low pressure high
net.ipv4.tcp_mem = 8388608 8388608 8388608

# Increase max number of sockets allowed in TIME_WAIT
net.ipv4.tcp_max_tw_buckets = 1440000

# try to reuse time-wait connections
net.ipv4.tcp_tw_reuse = 1

# Increase max half-open connections.
net.ipv4.tcp_max_syn_backlog = 262144

# Increase max TCP orphans
net.ipv4.tcp_max_orphans = 400000
net.ipv4.tcp_orphan_retries = 0

# Max listen queue backlog_
net.core.somaxconn = 262144

# Max number of packets that can be queued on interface input
net.core.netdev_max_backlog = 16384
net.core.dev_weight = 64

# Only retry creating TCP connections twice
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 2

# Timeout closing of TCP connections after 7 seconds
net.ipv4.tcp_fin_timeout = 7

# Avoid falling back to slow start after a connection goes idle
net.ipv4.tcp_slow_start_after_idle = 0

# Enable Selective Acknowledgements
net.ipv4.tcp_sack = 1
net.ipv4.tcp_fack = 1

# Enable Early Congestion Notification
net.ipv4.tcp_ecn = 2
net.ipv4.tcp_reordering = 3

# Increase TCP queue length
net.ipv4.neigh.default.proxy_qlen = 96
net.ipv4.neigh.default.unres_qlen = 6

# How many times to retry killing an alive TCP connection
net.ipv4.tcp_retries1 = 3
net.ipv4.tcp_retries2 = 15

# don't cache ssthresh from previous connection
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.tcp_moderate_rcvbuf = 1

# Allow the TCP fastopen flag to be used
# beware some firewalls do not like TFO! (kernel > 3_7)
net.ipv4.tcp_fastopen = 3

# Increase size of RPC datagram queue length
net.unix.max_dgram_qlen = 50

# Adjust where the gc will leave arp table alone - set to 3172.
net.ipv4.neigh.default.gc_thresh1 = 3172

# Tell the gc when to become aggressive with arp table cleaning.
net.ipv4.neigh.default.gc_thresh2 = 3684

# Don't allow the arp table to become bigger than this
net.ipv4.neigh.default.gc_thresh3 = 4096

# Adjust to arp table gc to clean-up more often
net.ipv4.neigh.default.gc_interval = 5
net.ipv4.neigh.default.gc_stale_time = 120

# Enable nonlocal binding_ Fixed the following NGINX error in OpenStack
#    NGINX error = [emerg] bind() to 10_14_38_44 =443 failed
#    (99 = Cannot assign requested address)
net.ipv4.ip_nonlocal_bind = 1

net.ipv4.route.max_size = 8048576

# This will ensure subsequent connections immediatly use new values
net.ipv4.route.flush = 1
net.ipv6.route.flush = 1

# More ports for outgoing connections
net.ipv4.ip_local_port_range = 10000 65000

# Connection tracking settings
net.netfilter.nf_conntrack_max = 1000000
net.netfilter.nf_conntrack_tcp_timeout_established = 1800
net.netfilter.nf_conntrack_tcp_timeout_close = 10
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 10
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 20
net.netfilter.nf_conntrack_tcp_timeout_last_ack = 20
net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 20
net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 2
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 10

# Prevent bogus ACKs (for unknown TCP connections ) to create conntrack state
net.netfilter.nf_conntrack_tcp_loose = 0

# Not recognized by sysctl
# net.ipv4.tcp_tw_recycle = 0

